package ru.vsu.cs.course1.game;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

import static ru.vsu.cs.course1.game.MainForm.goToLayout;

public class WinForm extends JDialog {
    private JButton nextButton;
    private JButton levelSelect;
    private JLabel numOfSteps;
    private JPanel winPose;
    private JLabel levelComplete;
    private JPanel panelMain;
    private JLabel rank;

    public WinForm(int num, JPanel pm, ActionListener newGameAction, Game game) {
        int level = Game.getCurLevel();
        this.setTitle("Winner winner chicken dinner");
        this.setContentPane(panelMain);
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.pack();

        this.setResizable(false);

        nextButton.setText("Next level");
        levelSelect.setText("Choose level");
        levelComplete.setText("Level " + level + " complete");
        numOfSteps.setText("Your num of steps: " + num);
        rank.setText(RankGiver.takeRank(num, level));
        game.setLevelRank(rank.getText());
        game.setRankSteps(num);

        if (level == 10) {
            nextButton.setVisible(false);
            levelComplete.setText("Last level complete");
        }

        levelSelect.addActionListener(e -> {
            goToLayout(pm, "panelLevels");
            game.deactivate();
            this.setVisible(false);
        });
        nextButton.addActionListener(e -> {
            goToLayout(pm, "panelGame");
            newGameAction.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "newGame"));
            this.setVisible(false);
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(5, 2, new Insets(10, 10, 10, 10), 1, 1, true, true));
        panelMain.setMinimumSize(new Dimension(640, 320));
        panelMain.setOpaque(false);
        panelMain.setPreferredSize(new Dimension(640, 320));
        nextButton = new JButton();
        nextButton.setText("Button");
        panelMain.add(nextButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        levelSelect = new JButton();
        levelSelect.setText("Button");
        panelMain.add(levelSelect, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        numOfSteps = new JLabel();
        Font numOfStepsFont = this.$$$getFont$$$("Consolas", -1, 12, numOfSteps.getFont());
        if (numOfStepsFont != null) numOfSteps.setFont(numOfStepsFont);
        numOfSteps.setText("Label");
        panelMain.add(numOfSteps, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelMain.add(spacer1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelMain.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        winPose = new JPanel();
        winPose.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(winPose, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        rank = new JLabel();
        rank.setEnabled(true);
        Font rankFont = this.$$$getFont$$$("Felix Titling", Font.BOLD, 76, rank.getFont());
        if (rankFont != null) rank.setFont(rankFont);
        rank.setText("Label");
        winPose.add(rank, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        levelComplete = new JLabel();
        Font levelCompleteFont = this.$$$getFont$$$("Engravers MT", Font.BOLD, 18, levelComplete.getFont());
        if (levelCompleteFont != null) levelComplete.setFont(levelCompleteFont);
        levelComplete.setText("Label");
        panelMain.add(levelComplete, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
